## Apache Velocity template
## Please see http://velocity.apache.org/engine/2.0/translations/user-guide_fr.html
/*
******************************************************************************
**
#if ($linkScriptInputs.isAllInRam())
**  File        : LinkerScript.ld (debug in RAM dedicated)
#else
**  File        : LinkerScript.ld
#end
**
**  Author		: Auto-generated by STM32CubeIDE
**
#if ($linkScriptInputs.getBoard().isGeneric())
**  Abstract    : Linker script for $linkScriptInputs.getBoard().getMcu().getName() Device from $linkScriptInputs.getBoard().getMcu().getSerie().getName() series
#foreach( $romMemory in $linkScriptInputs.getReadOnlyInternalMemorySet() )
**                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableInternalMemorySet() )
**                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#else
**  Abstract    : Linker script for $linkScriptInputs.getBoard().getName() Board embedding $linkScriptInputs.getBoard().getMcu().getName() Device from $linkScriptInputs.getBoard().getMcu().getSerie().getName() series
#foreach( $romMemory in $linkScriptInputs.getReadOnlyExternalMemorySet() )
**                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableExternalMemorySet() )
**                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#foreach( $romMemory in $linkScriptInputs.getReadOnlyInternalMemorySet() )
**                      $romMemory.getKBytesSize()Kbytes $romMemory.getName()
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableInternalMemorySet() )
**                      $ramMemory.getKBytesSize()Kbytes $ramMemory.getName()
#end
#end
**
**                Set heap size, stack size and stack location according
**                to application requirements.
**
**                Set memory bank area and size if external memory is used.
**
**  Target      : STMicroelectronics STM32
**
**  Distribution: The file is distributed as is without any warranty
**                of any kind.
**
*****************************************************************************
** @attention
**
** <h2><center>&copy; COPYRIGHT(c) $date STMicroelectronics</center></h2>
**
** Redistribution and use in source and binary forms, with or without modification,
** are permitted provided that the following conditions are met:
**   1. Redistributions of source code must retain the above copyright notice,
**      this list of conditions and the following disclaimer.
**   2. Redistributions in binary form must reproduce the above copyright notice,
**      this list of conditions and the following disclaimer in the documentation
**      and/or other materials provided with the distribution.
**   3. Neither the name of STMicroelectronics nor the names of its contributors
**      may be used to endorse or promote products derived from this software
**      without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
*****************************************************************************
*/
#set($Integer = 0)

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = 0x$Integer.toHexString($linkScriptInputs.getStackAddress());	/* end of "$linkScriptInputs.getMainWritableInternalMemory().getName()" $linkScriptInputs.getMainWritableInternalMemory().getType().toString() type memory */

_Min_Heap_Size = 0x$Integer.toHexString($linkScriptInputs.getHeapSize());	/* required amount of heap  */
_Min_Stack_Size = 0x$Integer.toHexString($linkScriptInputs.getStackSize());	/* required amount of stack */

/* Memories definition */
MEMORY
{
#foreach( $ramMemory in $linkScriptInputs.getWritableInternalMemorySet() )
    $ramMemory.getName()	($ramMemory.getType().getAccessModes())	: ORIGIN = $ramMemory.getStartAddress(),	LENGTH = $ramMemory.getKBytesSize()K
#end
#foreach( $romMemory in $linkScriptInputs.getReadOnlyInternalMemorySet() )
    $romMemory.getName()	($romMemory.getType().getAccessModes())	: ORIGIN = $romMemory.getStartAddress(),	LENGTH = $romMemory.getKBytesSize()K
#end
#foreach( $ramMemory in $linkScriptInputs.getWritableExternalMemorySet() )
    $ramMemory.getName()	($ramMemory.getType().getAccessModes())	: ORIGIN = $ramMemory.getStartAddress(),	LENGTH = $ramMemory.getKBytesSize()K
#end
#foreach( $romMemory in $linkScriptInputs.getReadOnlyExternalMemorySet() )
    $romMemory.getName()	($romMemory.getType().getAccessModes())	: ORIGIN = $romMemory.getStartAddress(),	LENGTH = $romMemory.getKBytesSize()K
#end
}

/* Sections */
#if ($linkScriptInputs.isAllInRam())
#set( $romMemory = $linkScriptInputs.getMainWritableInternalMemory() )
#else
#set( $romMemory = $linkScriptInputs.getMainReadOnlyInternalMemory() )
#end
SECTIONS
{
  /* The startup code into "$romMemory.getName()" $romMemory.getType().toString() type memory */
  .isr_vector :
  {
    . = ALIGN($romMemory.getMinAlignment());
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN($romMemory.getMinAlignment());
  } >$romMemory.getName()

  /* The program code and other data into "$romMemory.getName()" $romMemory.getType().toString() type memory */
  .text :
  {
    . = ALIGN($romMemory.getMinAlignment());
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN($romMemory.getMinAlignment());
    _etext = .;        /* define a global symbols at end of code */
  } >$romMemory.getName()

  /* Constant data into "$romMemory.getName()" $romMemory.getType().toString() type memory */
  .rodata :
  {
    . = ALIGN($romMemory.getMinAlignment());
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN($romMemory.getMinAlignment());
  } >$romMemory.getName()

  .ARM.extab   : { 
  	. = ALIGN($romMemory.getMinAlignment());
  	*(.ARM.extab* .gnu.linkonce.armextab.*)
  	. = ALIGN($romMemory.getMinAlignment());
  } >$romMemory.getName()
  
  .ARM : {
    . = ALIGN($romMemory.getMinAlignment());
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
    . = ALIGN($romMemory.getMinAlignment());
  } >$romMemory.getName()

  .preinit_array     :
  {
    . = ALIGN($romMemory.getMinAlignment());
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
    . = ALIGN($romMemory.getMinAlignment());
  } >$romMemory.getName()
  
  .init_array :
  {
    . = ALIGN($romMemory.getMinAlignment());
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
    . = ALIGN($romMemory.getMinAlignment());
  } >$romMemory.getName()
  
  .fini_array :
  {
    . = ALIGN($romMemory.getMinAlignment());
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
    . = ALIGN($romMemory.getMinAlignment());
  } >$romMemory.getName()

  /* Used by the startup to initialize data */
  _sidata = LOADADDR(.data);

  /* Initialized data sections into "$linkScriptInputs.getMainWritableInternalMemory().getName()" $linkScriptInputs.getMainWritableInternalMemory().getType().toString() type memory */
  .data : 
  {
    . = ALIGN($romMemory.getMinAlignment());
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN($romMemory.getMinAlignment());
    _edata = .;        /* define a global symbol at data end */
    
#if ($linkScriptInputs.isAllInRam())
  } >$romMemory.getName()
#else
  } >$linkScriptInputs.getMainWritableInternalMemory().getName() AT> $romMemory.getName()
#end  
  
  /* Uninitialized data section into "$linkScriptInputs.getMainWritableInternalMemory().getName()" $linkScriptInputs.getMainWritableInternalMemory().getType().toString() type memory */
  . = ALIGN($linkScriptInputs.getMainWritableInternalMemory().getMinAlignment());
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss secion */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN($linkScriptInputs.getMainWritableInternalMemory().getMinAlignment());
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >$linkScriptInputs.getMainWritableInternalMemory().getName()

  /* User_heap_stack section, used to check that there is enough "$linkScriptInputs.getMainWritableInternalMemory().getName()" $linkScriptInputs.getMainWritableInternalMemory().getType().toString()  type memory left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } >$linkScriptInputs.getMainWritableInternalMemory().getName()

  /* Remove information from the compiler libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
