# script for stm32mp15x family

#
# stm32 devices support both JTAG and SWD transports.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32mp15x
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 32kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x8000
}

# jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      # See STM Document RM0436
      # Section 66.8.3
      set _CPUTAPID 0x6ba00477
   } {
      set _CPUTAPID 0x6ba02477
   }
}

# Chip Level TAP Controller, only in jtag mode
if { [info exists CLCTAPID] } {
	set _CLCTAPID $CLCTAPID
} else {
	set _CLCTAPID 0x06500041
}

swj_newdap $_CHIPNAME tap -expected-id $_CPUTAPID -irlen 4 -ircapture 0x01 -irmask 0x0f
if { [using_jtag] } {
	swj_newdap $_CHIPNAME.clc tap -expected-id $_CLCTAPID -irlen 5
}
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.tap -ignore-syspwrupack
target create $_CHIPNAME.cpu0 cortex_a -dap $_CHIPNAME.dap -coreid 0 -dbgbase 0xE00D0000
target create $_CHIPNAME.cpu1 cortex_a -dap $_CHIPNAME.dap -coreid 1 -dbgbase 0xE00D2000 -defer-examine
target create $_CHIPNAME.axi mem_ap -dap $_CHIPNAME.dap -ap-num 0
target create $_CHIPNAME.ap1 mem_ap -dap $_CHIPNAME.dap -ap-num 1

target smp $_CHIPNAME.cpu0 $_CHIPNAME.cpu1
$_CHIPNAME.cpu0 cortex_a maskisr on
$_CHIPNAME.cpu1 cortex_a maskisr on
$_CHIPNAME.cpu0 cortex_a dacrfixup on
$_CHIPNAME.cpu1 cortex_a dacrfixup on

## IDE ToDo: drive this from the IDE
## it works in both cases, with M4...
set ENG_MODE 1

# Only in ENG_MODE the CM4 is available at reset
if { [info exists ENG_MODE] } {
	target create $_CHIPNAME.cpu2 cortex_m -dap $_CHIPNAME.dap
	target create $_CHIPNAME.ap2 mem_ap -dap $_CHIPNAME.dap -ap-num 2
} else {
	target create $_CHIPNAME.cpu2 cortex_m -dap $_CHIPNAME.dap -defer-examine
	target create $_CHIPNAME.ap2 mem_ap -dap $_CHIPNAME.dap -ap-num 2 -defer-examine
}

#$_CHIPNAME.cpu0 configure -work-area-phys 0x2ffc0000 -work-area-virt 0x2ffc0000 -work-area-size $_WORKAREASIZE -work-area-backup 0
#$_CHIPNAME.cpu1 configure -work-area-phys 0x2ffc0000 -work-area-virt 0x2ffc0000 -work-area-size $_WORKAREASIZE -work-area-backup 0
#$_CHIPNAME.cpu2 configure -work-area-phys 0x2ffc0000 -work-area-size $_WORKAREASIZE -work-area-backup 0

if { [info exists GDB_PORT] } {
	set _GDB_PORT $GDB_PORT
} else {
	set _GDB_PORT [ocd_gdb_port]
}

# The two CA7 will require one or two gdb ports, depending on smp enabled or not
# Set a fixed gdb port of CM4
$_CHIPNAME.cpu0 configure -gdb-port [expr $_GDB_PORT + 1]
$_CHIPNAME.cpu1 configure -gdb-port [expr $_GDB_PORT + 2]
$_CHIPNAME.cpu2 configure -gdb-port [expr $_GDB_PORT + 0]

$_CHIPNAME.cpu0 configure -event reset-deassert-post { delayed_reset_halt_cpu0 }

# In production mode, reset-halt stops in bootrom when only
# cpu0 can be attached due to security mode.
# Set a breakpoint to stop cpu0 when cpu1 can be attached too.
proc delayed_reset_halt_cpu0 { } {
	global _CHIPNAME
	global ENG_MODE
	global arp_reset_mode

	if { [info exists ENG_MODE] || ([string compare "$arp_reset_mode" "run"] == 0) } {
		# default reset-deassert-post handler
		arp_reset_default_handler post $_CHIPNAME.cpu0
	} else {
		# only in production mode for "reset halt" or "reset init"
		cortex_a smp_off
		targets $_CHIPNAME.cpu0
		arp_reset_default_handler post $_CHIPNAME.cpu0

		set rom_halt_pc 0x000079ac
		# quick test for rev.A, check bootrom
		set v ""
		axi_non_secure_access
		$_CHIPNAME.axi mem2array v 32 0x0000a000 1 phys
		axi_secure_access
		if { $v(0) == 0x1e494610 } {
			set rom_halt_pc 0x0000688c
		}

		poll on
		catch { $_CHIPNAME.cpu0 arp_waitstate halted 1000 }
		bp $rom_halt_pc 2 hw
		resume
		catch { $_CHIPNAME.cpu0 arp_waitstate halted 1000 }
		rbp $rom_halt_pc

		cortex_a smp_on
	}
}

targets $_CHIPNAME.cpu0

# interface does not work while srst is asserted
# this is target specific, valid for every board
reset_config srst_gates_jtag

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 5000
}
adapter_khz $_CLOCK_FREQ
adapter_nsrst_assert_width 200
adapter_nsrst_delay 200


$_CHIPNAME.ap1 configure -event examine-end {
	global _CHIPNAME

	# only on dual-cores chips, examine the second core
	$_CHIPNAME.ap1 mem2array cpu1_prsr 32 0xE00D2314 1
	if {$cpu1_prsr(0) & 1} {
		$_CHIPNAME.cpu1 arp_examine
	}
}


set clients_num 0
proc clients_inc {} {
	global clients_num

	incr clients_num
}

proc clients_dec_and_shutdown {} {
	global clients_num

	incr clients_num -1
	if { $clients_num <= 0 } { shutdown }
}

$_CHIPNAME.cpu0 configure -event gdb-attach { clients_inc; halt }
$_CHIPNAME.cpu1 configure -event gdb-attach { clients_inc; halt }

$_CHIPNAME.cpu2 configure -event gdb-attach {
	global _CHIPNAME
	global ENG_MODE

	clients_inc

	# Only in ENG_MODE the CM4 is available at reset
	if { ! [info exists ENG_MODE] } {
		$_CHIPNAME.cpu2 arp_examine
		$_CHIPNAME.cpu2 arp_poll
		$_CHIPNAME.ap2  arp_examine
		$_CHIPNAME.ap2  arp_poll
	}
	halt
}

$_CHIPNAME.cpu0 configure -event gdb-detach { catch { resume }; clients_dec_and_shutdown }
$_CHIPNAME.cpu1 configure -event gdb-detach { catch { resume }; clients_dec_and_shutdown }
$_CHIPNAME.cpu2 configure -event gdb-detach { catch { resume }; clients_dec_and_shutdown }

proc axi_secure_access {} {
	global _CHIPNAME

	$_CHIPNAME.dap apsel 0
	$_CHIPNAME.dap apcsw 0x10006000
}

proc axi_non_secure_access {} {
	global _CHIPNAME

	$_CHIPNAME.dap apsel 0
	$_CHIPNAME.dap apcsw 0x30006000
}

axi_secure_access
